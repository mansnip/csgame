version: '3.8'

services:
  # سرویس دیتابیس SQL Server
  db:
    image: mcr.microsoft.com/mssql/server:2022-latest # یا نسخه دلخواه دیگر
    container_name: sql_server_db
    environment:
      ACCEPT_EULA: 'Y'
      MSSQL_SA_PASSWORD: 'Pashmak0921C#' # رمز عبور قوی خود را اینجا بگذارید
      # MSSQL_PID: 'Developer' # (اختیاری) برای نسخه Developer
    ports:
      - "1433:1433" # پورت SQL Server
    volumes:
      - sql_data:/var/opt/mssql # Volume برای داده‌ها
    networks:
      - csgame_network # استفاده از شبکه مشترک

  # سرویس اپلیکیشن csgame.App
  app:
    # به جای 'image'، از 'build' استفاده می‌کنیم تا از Dockerfile شما ایمیج بسازد
    build:
      context: . # مسیر پوشه‌ای که Dockerfile شما در آن قرار دارد (معمولاً ریشه پروژه)
      dockerfile: Dockerfile # نام فایل Dockerfile (اگر نامش متفاوت است)
    container_name: csgame_app
    ports:
      # پورت 8080 داخل کانتینر (که در Dockerfile شما EXPOSE شده)
      # را به پورت 80 روی هاست مپ می‌کنیم (یا هر پورتی که می‌خواهید از بیرون به آن دسترسی داشته باشید)
      - "80:8080"
      # اگر از پورت 8081 هم استفاده می‌کنید:
      - "8081:8081"
    environment:
      # Connection String برای اتصال به سرویس 'db' در همین فایل docker-compose
      ConnectionStrings__DefaultConnection: "Server=199.247.4.140;Database=VeilVPNDb;User ID=sa;Password=Pashmak0921C#;TrustServerCertificate=True;Encrypt=False"
      # تنظیم پورت داخلی که ASP.NET Core روی آن گوش می‌دهد (مطابق با EXPOSE در Dockerfile)
      # اگر برنامه شما روی 8080 گوش می‌دهد، این ممکن است لازم نباشد یا باید مطابق تنظیمات برنامه باشد
      ASPNETCORE_URLS: "http://+:8080"
      # سایر متغیرهای محیطی مورد نیاز اپلیکیشن شما
      ASPNETCORE_ENVIRONMENT: "Production"
    depends_on:
      - db # قبل از اجرای اپلیکیشن، منتظر آماده شدن دیتابیس می‌ماند
    networks:
      - csgame_network # استفاده از شبکه مشترک

volumes:
  sql_data: # تعریف Volume برای دیتابیس
    driver: local

networks:
  csgame_network: # تعریف شبکه برای ارتباط بین کانتینرها
    driver: bridge
