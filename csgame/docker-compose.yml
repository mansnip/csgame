version: '3.8' # از یک نسخه جدیدتر استفاده کنید

services:
  # سرویس برای اپلیکیشن NET. شما
  webapp:
    container_name: my-aspnet-app  # نام دلخواه برای کانتینر اپلیکیشن
    build:
      context: .  # مسیر Dockerfile شما (اگر در همین پوشه است، نقطه کافی است)
      dockerfile: YourApp/Dockerfile # مسیر دقیق Dockerfile نسبت به context
    ports:
      - "8080:80" # پورت 80 کانتینر را به پورت 8080 هاست مپ کنید (یا پورت مورد نظر خودتان)
    environment:
      # --- مهم: Connection String از طریق متغیر محیطی ---
      - ConnectionStrings__DefaultConnection=Server=db;Database=MyDatabaseName;User ID=sa;Password=${SA_PASSWORD};TrustServerCertificate=True # توضیح در ادامه
      # متغیرهای محیطی دیگر مورد نیاز اپلیکیشن شما
      # - ASPNETCORE_ENVIRONMENT=Production
      # - ZarinpalSettings__MerchantId=YOUR_MERCHANT_ID
    depends_on:
      - db # مشخص می‌کند که این سرویس به سرویس db وابسته است
    networks:
      - app-network # اتصال به شبکه مشترک

  # سرویس برای دیتابیس SQL Server
  db:
    container_name: my-sql-server # نام دلخواه برای کانتینر دیتابیس
    image: mcr.microsoft.com/mssql/server:2019-latest # ایمیج رسمی SQL Server برای لینوکس (نسخه را می‌توانید تغییر دهید)
    environment:
      - ACCEPT_EULA=Y # ضروری برای پذیرش لایسنس
      - SA_PASSWORD=${SA_PASSWORD} # --- مهم: رمز عبور کاربر sa ---
      # - MSSQL_PID=Developer # اختیاری: برای استفاده از نسخه Developer (رایگان)
    ports:
      # این قسمت اختیاری است: اگر می‌خواهید از بیرون (مثلاً با SSMS از روی سیستم خودتان) به دیتابیس وصل شوید
      # پورت 1433 کانتینر را به پورت 1433 هاست مپ کنید
      - "1433:1433"
    volumes:
      - sqlserver-data:/var/opt/mssql # --- مهم: نگهداری داده‌های دیتابیس ---
    networks:
      - app-network # اتصال به شبکه مشترک

volumes:
  sqlserver-data: # تعریف Volume برای ذخیره پایدار داده‌های SQL Server

networks:
  app-network: # تعریف شبکه سفارشی برای ارتباط بین کانتینرها
    driver: bridge

